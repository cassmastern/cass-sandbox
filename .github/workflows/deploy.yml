name: Deploy MkDocs to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git-revision-date-localized-plugin
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder  # Use the builder stage
          push: false
          tags: mkdocs-builder:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build MkDocs site
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            mkdocs-builder:latest \
            mkdocs build --verbose --strict
      
      - name: Verify build output
        run: |
          if [ ! -d "./site" ]; then
            echo "❌ ERROR: MkDocs output folder './site' not found."
            echo "Available directories:"
            ls -la ./
            exit 1
          fi

          echo "✅ Build output directory found"
          
          # Check for essential files
          essential_files=(
            "index.html"
            "search/search_index.json"
            "js/diagram-accessibility.js"
            "js/diagram-zoom.js" 
            "css/accessibility.css"
            "css/diagram-zoom.css"
          )
          
          for file in "${essential_files[@]}"; do
            if [ -f "./site/$file" ]; then
              echo "✅ Found: $file"
            else
              echo "⚠️  Missing: $file"
            fi
          done
          
          # Check for Mermaid diagrams in HTML files
          mermaid_count=$(find ./site -name "*.html" -exec grep -l "mermaid" {} \; | wc -l)
          echo "📊 Found $mermaid_count HTML files with Mermaid content"
          
          # Verify JavaScript files are not minified (for debugging)
          if [ -f "./site/js/diagram-accessibility.js" ]; then
            js_size=$(stat -f%z "./site/js/diagram-accessibility.js" 2>/dev/null || stat -c%s "./site/js/diagram-accessibility.js")
            echo "📏 diagram-accessibility.js size: ${js_size} bytes"
          fi

      - name: Run accessibility audit (optional)
        continue-on-error: true
        run: |
          # Install pa11y for accessibility testing
          npm install -g pa11y
          
          # Start a simple HTTP server
          cd site
          python3 -m http.server 8080 &
          SERVER_PID=$!
          sleep 2
          
          # Test a few key pages for accessibility
          echo "🔍 Running accessibility audit..."
          pa11y http://localhost:8080/ --reporter cli || echo "⚠️  Accessibility issues found"
          pa11y http://localhost:8080/z_taxi/ --reporter cli || echo "⚠️  Accessibility issues found on test page"
          
          # Clean up
          kill $SERVER_PID 2>/dev/null || true
          cd ..

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  accessibility-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    
    steps:
      - name: Wait for deployment
        run: sleep 30
        
      - name: Test live site accessibility
        run: |
          npm install -g pa11y
          
          # Test main pages
          echo "🔍 Testing live site accessibility..."
          pa11y ${{ steps.deployment.outputs.page_url }} --reporter cli
          pa11y ${{ steps.deployment.outputs.page_url }}z_taxi/ --reporter cli
          